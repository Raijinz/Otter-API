import uuid
from django.db import models
from django.utils.translation import ugettext_lazy as _
from django.conf import settings


class PyOTP(models.Model):
    uuid = models.UUIDField(
        _('OTP Unique uuid'),
        unique=True,
        default=uuid.uuid4,
        editable=False,
        help_text=_('Non-editable, to be generated by system itself.'),
    )
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        blank=True,
        null=True,
        on_delete=models.CASCADE,
        help_text=_('User that use this secret.'),
    )
    secret = models.CharField(
        _('Secret'),
        null=False,
        blank=False,
        max_length=50,
        help_text=_('Secret used to generate OTP.'),
    )
    count = models.IntegerField(
        _('Count'),
        null=True,
        blank=True,
        help_text=_('OTP Count, to be used in case of HOTP.'),
    )
    interval = models.IntegerField(
        _('Interval (in seconds)'),
        null=True,
        blank=True,
        help_text=_('OTP Interval, to be used in case of TOTP.')
    )
    name = models.CharField(
        _('Account Name'),
        null=True,
        blank=True,
        max_length=255,
        help_text=_('Account Name for Provisioning URI.'),
    )
    initial_count = models.IntegerField(
        _('Initial Count'),
        null=True,
        blank=True,
        help_text=_('Initial Count for Provisioning URI.'),
    )
    issuer_name = models.CharField(
        _('Issuer Name'),
        null=True,
        blank=True,
        max_length=255,
        help_text=_('Issuer Name for Provisioning URI.'),
    )
    refer_code = models.CharField(
        _('Refer Code'),
        null=True,
        blank=True,
        max_length=4,
        help_text=_('Refer Code for each request of FCM.'),
    )
    created_at = models.DateTimeField(
        _('Created at'),
        auto_now_add=True,
        db_index=True,
    )

    class Meta:
        verbose_name = _("PyOTP")
        verbose_name_plural = _("PyOTP")

    def __str__(self):
        return str(self.uuid)
